#!/usr/bin/env bash

# Prowler - the handy cloud security tool (copyright 2018) by Toni de la Fuente
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy
# of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed
# under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, either express or implied. See the License for the
# specific language governing permissions and limitations under the License.

# Gets account details with a given ACCOUNT_ID.
# Prowler requires organizations:ListAccounts* and organizations:ListTagsForResource
# in the management account in order to get that data. SecurityAudit managed policy includes them.

# Account Tags are in json format with comma, however they are converted to Base64 
# in order to avoid breaking the CSV or JSON. To use them a post-processor is needed.

get_orgs_account_details(){
    # -O to get info from Orgs management account needs also (-A) and (-R)
    if [[ $MANAGEMENT_ACCOUNT_ID ]];then
        if [[ -z $ROLE_TO_ASSUME || -z $ACCOUNT_TO_ASSUME ]]; then
            echo "$OPTRED ERROR!$OPTNORMAL - Both Account ID (-A) and IAM Role to assume (-R) must be set with -O"
            exit 1
        fi
        assume_role
    fi 
    
    # Below requires organizations:ListTagsForResource
    ACCOUNTS_DETAILS=$($AWSCLI $PROFILE_OPT --region $REGION organizations list-accounts --output json 2>&1)
    if [[ $(echo "$ACCOUNTS_DETAILS" | grep -E 'AccessDenied|UnauthorizedOperation|AuthorizationError') ]]; then
        textInfo "$regx: Access Denied trying to list AWS Organization accounts. Prowler requires organizations:List*" "$regx"
    else 
        # Prowler gets only ACTIVE accounts details
        ACCOUNT_DETAILS_EMAIL=$(echo $ACCOUNTS_DETAILS | jq -r --arg ACCOUNT_ID $2 '.Accounts[] | select(.Status == "ACTIVE") | select(.Id == $ACCOUNT_ID) | "\(.Email)"')
        ACCOUNT_DETAILS_NAME=$(echo $ACCOUNTS_DETAILS | jq -r --arg ACCOUNT_ID $2 '.Accounts[] | select(.Status == "ACTIVE") | select(.Id == $ACCOUNT_ID) | "\(.Name)"')
        ACCOUNT_DETAILS_ARN=$(echo $ACCOUNTS_DETAILS | jq -r --arg ACCOUNT_ID $2 '.Accounts[] | select(.Status == "ACTIVE") | select(.Id == $ACCOUNT_ID) | "\(.Arn)"')
        ACCOUNT_DETAILS_ORG=$(echo $ACCOUNTS_DETAILS | jq -r --arg ACCOUNT_ID $2 '.Accounts[] | select(.Status == "ACTIVE") | select(.Id == $ACCOUNT_ID) | "\(.Arn)"'| awk -F/ '{ print $2 }')
        ACCOUNT_DETAILS_TAGS=$($AWSCLI $PROFILE_OPT --region $REGION organizations list-tags-for-resource --resource-id $1 --output json | jq -c '. | @base64' 2>&1)
        if [[ $(echo "$ACCOUNTS_DETAILS" | grep -E 'AccessDenied|UnauthorizedOperation|AuthorizationError') ]]; then
            textInfo "$regx: Access Denied trying to list AWS Organization accounts. Prowler requires organizations:List*" "$regx"
        fi
    fi
}

get_orgs_account_details_logic(){
    backupInitialAWSCredentials
    
    if [[ ${MANAGEMENT_ACCOUNT_ID} ]];then 
        echo " Prowler is getting details from the AWS Organizations Management Account: $1..."
        get_orgs_account_details ${MANAGEMENT_ACCOUNT_ID} ${ACCOUNT_NUM}
    fi 
    restoreInitialAWSCredentials
    rm -fr "${TEMP_ORG_STS_ASSUMED_FILE}"
    rm -fr "${TEMP_ORG_STS_ASSUMED_ERROR}"
}
