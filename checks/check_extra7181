#!/usr/bin/env bash

# Prowler - the handy cloud security tool (copyright 2019) by Toni de la Fuente
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy
# of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed
# under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, either express or implied. See the License for the
# specific language governing permissions and limitations under the License.



CHECK_ID_extra7181="7.181"
CHECK_TITLE_extra7181="[extra7181] Ensure IAM policies not allow for Privilege Escalation"
CHECK_SCORED_extra7181="NOT_SCORED"
CHECK_CIS_LEVEL_extra7181="EXTRA"
CHECK_SEVERITY_extra7181="Medium"
CHECK_ASFF_RESOURCE_TYPE_extra7181="AwsIamPolicy"
CHECK_ALTERNATE_check7181="extra7181"
CHECK_SERVICENAME_extra7181="iam"
CHECK_RISK_extra7181='Users with some IAM permissions are allowed to elevate their privileges up to administrator rights.'
CHECK_REMEDIATION_extra7181='Grant usage permission on a per-resource basis and applying least privilege principle.'
CHECK_DOC_extra7181='https://docs.aws.amazon.com/IAM/latest/APIReference/API_CreateAccessKey.html'
CHECK_CAF_EPIC_extra7181='IAM'

extra7181() {
    # Incluir como un recurso consultable para la remediación y la doc
    local PRIVILEGE_ESCALATION_IAM_ACTIONS="iam:AddUserToGroup|iam:AttachRolePolicy|iam:AttachUserPolicy|iam:CreateAccessKey|iam:CreatePolicyVersion|iam:CreateLoginProfile|iam:PassRole|iam:PutGroupPolicy|iam:PutRolePolicy|iam:PutUserPolicy|iam:SetDefaultPolicyVersion|iam:UpdateAssumeRolePolicy|iam:UpdateLoginProfile|sts:AssumeRole|ec2:RunInstances|lambda:CreateEventSourceMapping|lambda:CreateFunction|lambda:InvokeFunction|lambda:UpdateFunctionCode|dynamodb:CreateTable|dynamodb:PutItem|glue:CreateDevEndpoint|glue:UpdateDevEndpoint|cloudformation:CreateStack|datapipeline:CreatePipeline"

  # Use --scope Local to list only Customer Managed Policies
  # Query AttachmentCount > 0  to check if this policy is in use, so attached to any user, group or role
    LIST_CUSTOM_POLICIES=$(${AWSCLI} iam list-policies ${PROFILE_OPT} \
    --region "${REGION}" \
    --scope Local \
    --query 'Policies[?AttachmentCount > `0`].[Arn,DefaultVersionId]' \
    --output text)
    # Check errors
    if grep -q -E 'AccessDenied|UnauthorizedOperation|AuthorizationError' <<< "${LIST_CUSTOM_POLICIES}"; then
        textInfo "${REGION}: Access Denied trying to list IAM policies" "${REGION}"
    else
        if [[ $LIST_CUSTOM_POLICIES ]]; then
            while read -r POLICY_ARN POLICY_DEFAULT_VERSION; do
                # POLICY_NAME="${POLICY_ARN///}"
                POLICY_PRIVILEGED_ACTIONS=$($AWSCLI iam get-policy-version ${PROFILE_OPT} \
                    --output json \
                    --policy-arn "${POLICY_ARN}" \
                    --version-id "${POLICY_DEFAULT_VERSION}" \
                    --region "${REGION}" \
                    --query "PolicyVersion.Document.Statement[?(not_null(Action) && Effect == 'Allow' && Resource == '*')].Action[]" \
                    --output text)
                    # que pasa si la política tiene como resource una lista ["*"]
                    # Does the tool analyze both users and roles, or just one or the other?
                    # Does the tool take a principal-centric or policy-centric approach?
                    # Does the tool handle resource constraints?
                    # Does the tool consider the permissions of service roles?
                    # Does the tool handle transitive privesc paths (i.e., attack chains)?
                    # Does the tool handle the DENY effect as expected?
                    # Does the tool handle NotAction as expected?
                    # Does the tool handle Condition constraints?
                    # Does the tool handle service control policy (SCP) restrictions?

                POLICY_PRIVILEGE_ESCALATION_ACTIONS=$(grep -o -E "${PRIVILEGE_ESCALATION_IAM_ACTIONS}" <<< "${POLICY_PRIVILEGED_ACTIONS}")
                if [[ -n "${POLICY_PRIVILEGE_ESCALATION_ACTIONS}" ]]; then
                    textFail "${REGION}: ${POLICY_ARN} allows for privilige escalation using the following actions: ${POLICY_PRIVILEGE_ESCALATION_ACTIONS//$'\n'/ }" "$REGION" "${POLICY_NAME}"
                else
                    textPass "${REGION}: Custom Policy ${POLICY_ARN} not allows privilige escalation" "$REGION" "${POLICY_NAME}"
                fi
            done<<<"${LIST_CUSTOM_POLICIES}"
        else
            textPass "$REGION: No Customer Managed Policies attached found" "$REGION"
        fi
    fi
}
