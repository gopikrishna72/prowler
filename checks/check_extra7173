#!/usr/bin/env bash

# Prowler - the handy cloud security tool (copyright 2019) by Toni de la Fuente
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy
# of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed
# under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, either express or implied. See the License for the
# specific language governing permissions and limitations under the License.

# Remediation:
#
#   here URL to the relevand/official documentation
#
#   here commands or steps to fix it if avalable, like:
#   aws logs put-metric-filter \
#     --region us-east-1 \
#     --log-group-name CloudTrail/MyCloudTrailLG \
#     --filter-name AWSCloudTrailChanges \
#     --filter-pattern '{ ($.eventName = CreateTrail) || ($.eventName = UpdateTrail) || ($.eventName = DeleteTrail) || ($.eventName = StartLogging) || ($.eventName = StopLogging) }' \
#     --metric-transformations metricName=CloudTrailEventCount,metricNamespace=CloudTrailMetrics,metricValue=1

CHECK_ID_extra7173="7.173"
CHECK_TITLE_extra7173="[check7173] SGs created by Wizard "
CHECK_SCORED_extra7173="NOT_SCORED"
CHECK_CIS_LEVEL_extra7173="EXTRA"
CHECK_SEVERITY_extra7173="Medium"
CHECK_ASFF_RESOURCE_TYPE_extra7173="AwsAccount" # Choose appropriate value from https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-findings-format.html#asff-resources
CHECK_ALTERNATE_extra7173="extra7173"
CHECK_SERVICENAME_extra7173="service" # get service short name from `curl -s https://api.regional-table.region-services.aws.a2z.com/index.json | jq -r '.prices[] | .id' | awk -F: '{ print $1 }' | sort -u`
CHECK_RISK_cextra7173="NA"
CHECK_REMEDIATION_extra7173="NA"
CHECK_DOC_extra7173="NA"
CHECK_CAF_EPIC_extra7173="NA"

# General comments
# ----------------
# Do not add double quotes (") arround variable ${PROFILE_OPT} because this variable holds "--profile <profile-name>" and we need to read it as it is
# Always check for AccessDenied|UnauthorizedOperation|AuthorizationError after AWS CLI command, using "2>&1" at the end
# Avoid execute the same AWS CLI command again to check different attribute:
#  - Return all attributes on "--query"
#  - Use "read -r" to get all individual attributes
#  - Use "here-string" (<<<) when is necessary to interate through AWS CLI output with multiple attributes on the same line
#    - Here-string variable must be enclosed with double quotes, like "${LIST_OF_PUBLIC_INSTANCES}"
#  - See "Example of regional resource" below about how to do it
# When an attribute doesn't exist, AWS CLI "--query" always return "none" if output is json or "None" if output is text
# Use bash features to handle variable:
#  - ${var:N}      : Return string from position 'N'
#  - ${var:N:len}  : Return 'len' characters from position 'N'
#  - ${var^^}      : Convert to upper-case all characters
#  - ${var,,}      : Convert to lower-case all characters
#  - ATTENTION: macOS original bash version "GNU bash, version 3.2.57(1)-release (x86_64-apple-darwin19)" doesn't support some variable expansion above.
#               Please make sure to test it.
#  - For more examples and how to use it please refer to https://www.gnu.org/software/bash/manual/bash.html#Shell-Parameter-Expansion
# Check code with ShellCheck for best practices:
#  - https://www.shellcheck.net/
#  - https://github.com/koalaman/shellcheck#user-content-in-your-editor

extra7173(){
  # "Ensure the default security group of every VPC restricts all traffic (Scored)"
   for regx in $REGIONS; do
    SG_LIST=$($AWSCLI ec2 describe-security-groups --query 'SecurityGroups[?length(IpPermissions[?((FromPort==null && ToPort==null) || (FromPort==`0` && ToPort==`65535`)) && (contains(IpRanges[].CidrIp, `0.0.0.0/0`) || contains(Ipv6Ranges[].CidrIpv6, `::/0`))]) > `0`].{GroupId:GroupId}' $PROFILE_OPT --region $regx --output text 2>&1)
    if [[ $(echo "$SG_LIST" | grep -E 'AccessDenied|UnauthorizedOperation|AuthorizationError') ]]; then
        textInfo "$regx: Access Denied trying to describe security groups" "$regx"
        continue
    fi 
    if [[ $SG_LIST ]];then
      for SG in $SG_LIST;do
        textFail "$regx: Found Security Group: $SG open to 0.0.0.0/0" "$regx" "$SG"
      done
    else
      textPass "$regx: No Security Groups found with any port open to 0.0.0.0/0" "$regx"
    fi
  done
}

  for regx in $REGIONS; do
    CHECK_SGDEFAULT_IDS=$($AWSCLI ec2 describe-security-groups $PROFILE_OPT --region $regx --filters Name=group-name,Values='*wizard*' --query 'SecurityGroups[*].GroupId[]' --output text 2>&1)
    if [[ $(echo "$CHECK_SGDEFAULT_IDS" | grep -E 'AccessDenied|UnauthorizedOperation') ]]; then
        textInfo "$regx: Access Denied trying to describe security groups" "$regx"
        continue
    fi
    for CHECK_SGDEFAULT_ID in $CHECK_SGDEFAULT_IDS; do
        textPass "$regx: Security Group ($CHECK_SGDEFAULT_ID) created using the Wizard" "$regx" "$CHECK_SGDEFAULT_ID"
    done
  done
}